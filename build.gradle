plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

base {
	archivesName = project.archives_base_name
}

version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	// CCA
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}

	// mod menu
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/'
	}

	maven { url 'https://jitpack.io' }

	maven {
		name "modrinth"
		url "https://api.modrinth.com/maven"
	}

	// mialee misc
	maven { url "https://maven.willbl.dev/releases" }

	maven { url 'https://masa.dy.fi/maven' }

	mavenCentral()
}

loom {
	accessWidenerPath = file("src/main/resources/insomnia.accesswidener")
	mods {
		"insomnia" {
			sourceSet("main")

		}
	}
}

dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api

	// mod menu
	modCompileOnly "com.terraformersmc:modmenu:${mod_menu_version}"
	modRuntimeOnly "com.terraformersmc:modmenu:${mod_menu_version}"
	// CCA
	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}")
	// lodestone lib
	include modApi("com.github.Arathain:LodestoneLib-Quilt:${project.lodestone_version}"){ transitive = false }

	include modApi("io.github.ladysnake:satin:${project.satin_version}")
	include modApi("maven.modrinth:midnightlib:$project.midnightlib_version")

	// midnightlib
	modImplementation include("maven.modrinth:midnightlib:${midnightlib_version}")

	// ease of multiplayer testing & game control
	modRuntimeOnly "carpet:fabric-carpet:${project.carpet_core_version}"
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand 'version': version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()

}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {

	}
}
